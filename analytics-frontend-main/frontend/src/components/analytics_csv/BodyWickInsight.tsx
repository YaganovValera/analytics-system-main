// src/components/BodyWickInsight.tsx
import { useState } from 'react';
import { LineChart, Line, XAxis, YAxis, Tooltip, ResponsiveContainer, Label } from 'recharts';
import type { AnalyticsResponse } from '../../types/analytics';
import './BodyWickInsight.css';

interface Props {
    analytics: AnalyticsResponse['analytics'];
}

function BodyWickInsight({ analytics }: Props) {
    const [flipped, setFlipped] = useState(false);

    const { avg_body_size, avg_upper_wick, avg_lower_wick } = analytics;
    const totalWick = avg_upper_wick + avg_lower_wick;
    const bodyRatio = totalWick > 0 ? avg_body_size / totalWick : 0;
    const wickRatio = avg_body_size > 0 ? totalWick / avg_body_size : 0;

    const data = [
        { name: '–¢–µ–ª–æ —Å–≤–µ—á–∏', value: avg_body_size },
        { name: '–í–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å', value: avg_upper_wick },
        { name: '–ù–∏–∂–Ω—è—è —Ç–µ–Ω—å', value: avg_lower_wick },
    ];

    const verdict = avg_body_size > totalWick
        ? `–°—Ä–µ–¥–Ω–µ–µ —Ç–µ–ª–æ —Å–≤–µ—á–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${avg_body_size.toFixed(2)}, —á—Ç–æ –≤ ${bodyRatio.toFixed(1)} —Ä–∞–∑–∞ –±–æ–ª—å—à–µ —Å—É–º–º—ã —Ç–µ–Ω–µ–π (${totalWick.toFixed(2)}). –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —É—Å—Ç–æ–π—á–∏–≤–æ–µ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞.`
        : totalWick > avg_body_size * 1.5
        ? `–°—É–º–º–∞ —Ç–µ–Ω–µ–π (${totalWick.toFixed(2)}) –≤ ${wickRatio.toFixed(1)} —Ä–∞–∑–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ç–µ–ª–æ —Å–≤–µ—á–∏ (${avg_body_size.toFixed(2)}). –≠—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫–æ–ª–µ–±–∞–Ω–∏—è—Ö –Ω–∞ —Ä—ã–Ω–∫–µ.`
        : `–¢–µ–ª–æ —Å–≤–µ—á–∏ (${avg_body_size.toFixed(2)}) –∏ —Ç–µ–Ω–∏ (${totalWick.toFixed(2)}) –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã. –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –±–æ–∫–æ–≤–æ–µ –∏–ª–∏ —Å–º–µ—à–∞–Ω–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ.`;

    return (
        <div className="wick-insight-wrapper">
        <div className="wick-chart">
            <h4>üïØÔ∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–≤–µ—á–µ–π (—Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)</h4>
            <ResponsiveContainer width="100%" height={260}>
            <LineChart data={data} margin={{ top: 20, right: 30, left: 10, bottom: 10 }}>
                <XAxis dataKey="name" />
                <YAxis>
                <Label
                    angle={-90}
                    position="insideLeft"
                    style={{ textAnchor: 'middle', fill: '#666' }}
                >
                    –ó–Ω–∞—á–µ–Ω–∏–µ (–≤ –ø—É–Ω–∫—Ç–∞—Ö)
                </Label>
                </YAxis>
                <Tooltip formatter={(v: number) => v.toFixed(2)} />
                <Line
                type="monotone"
                dataKey="value"
                stroke="#1976d2"
                strokeWidth={3}
                dot={{ r: 6 }}
                activeDot={{ r: 8 }}
                />
            </LineChart>
            </ResponsiveContainer>
        </div>
        <div className={`wick-summary ${flipped ? 'flipped' : ''}`}> 
            <div className="flip-icon" onClick={() => setFlipped(!flipped)} title={flipped ? '–ù–∞–∑–∞–¥ –∫ –∞–Ω–∞–ª–∏–∑—É' : '–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é'}>
            {flipped ? 'üîô' : '‚ÑπÔ∏è'}
            </div>
            <div className="wick-text">
            {!flipped ? (
                <>
                <h4>üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑</h4>
                <p><strong>–°—Ä–µ–¥–Ω–µ–µ —Ç–µ–ª–æ:</strong> {avg_body_size.toFixed(2)}</p>
                <p><strong>–í–µ—Ä—Ö–Ω—è—è —Ç–µ–Ω—å:</strong> {avg_upper_wick.toFixed(2)}</p>
                <p><strong>–ù–∏–∂–Ω—è—è —Ç–µ–Ω—å:</strong> {avg_lower_wick.toFixed(2)}</p>
                <p>{verdict}</p>
                </>
            ) : (
                <>
                <h4>üìò –ß—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç?</h4>
                <p>–ö–∞–∂–¥–∞—è —Å–≤–µ—á–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç–µ–ª–∞ –∏ —Ç–µ–Ω–µ–π. –¢–µ–ª–æ ‚Äî —ç—Ç–æ –¥–∏–∞–ø–∞–∑–æ–Ω –º–µ–∂–¥—É —Ü–µ–Ω–∞–º–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –∑–∞–∫—Ä—ã—Ç–∏—è. –¢–µ–Ω–∏ ‚Äî –º–∞–∫—Å–∏–º—É–º—ã –∏ –º–∏–Ω–∏–º—É–º—ã, –≤ –∫–æ—Ç–æ—Ä—ã–µ —Ü–µ–Ω–∞ —Å—Ö–æ–¥–∏–ª–∞.</p>
                <p>–ï—Å–ª–∏ —Ç–µ–ª–æ –±–æ–ª—å—à–µ —Ç–µ–Ω–µ–π ‚Äî —Ä—ã–Ω–æ–∫ –¥–≤–∏–≥–∞–ª—Å—è —É–≤–µ—Ä–µ–Ω–Ω–æ –≤ –æ–¥–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏. –ï—Å–ª–∏ —Ç–µ–Ω–∏ –¥–ª–∏–Ω–Ω–µ–µ —Ç–µ–ª–∞ ‚Äî –±—ã–ª–æ –º–Ω–æ–≥–æ –∫–æ–ª–µ–±–∞–Ω–∏–π, –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –±–æ—Ä—å–±–∞ –º–µ–∂–¥—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏ –∏ –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏.</p>
                <p>–ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–≤–µ—á–µ–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ ¬´—Å–ø–æ–∫–æ–π–Ω—ã–º¬ª –∏–ª–∏ ¬´—Ç—É—Ä–±—É–ª–µ–Ω—Ç–Ω—ã–º¬ª –±—ã–ª —Ä—ã–Ω–æ–∫ –≤ –ø–µ—Ä–∏–æ–¥–µ –∞–Ω–∞–ª–∏–∑–∞.</p>
                </>
            )}
            </div>
        </div>
        </div>
    );
}

export default BodyWickInsight;