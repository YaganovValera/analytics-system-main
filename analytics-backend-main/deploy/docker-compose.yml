
networks:
  backend:

volumes:
  timescale_data:

services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  zookeeper:
    image: bitnami/zookeeper:3.8
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOO_ENABLE_ADMIN_SERVER: "no"
    ports:
      - "2181:2181"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "echo", "ruok"]
      interval: 5s
      timeout: 3s
      retries: 5

  kafka:
    image: bitnami/kafka:3.5
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
    ports:
      - "9092:9092"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092"]
      interval: 5s
      timeout: 3s
      retries: 10

  timescaledb:
    image: timescale/timescaledb:latest-pg14
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d:ro
    networks:
      - backend
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user"]
      interval: 5s
      timeout: 3s
      retries: 10

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command:
      - --config=/etc/otel-collector-config.yaml
    volumes:
      - ./monitoring/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"
      - "4318:4318"
      - "13133:13133"
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    networks:
      - backend

  grafana:
    image: grafana/grafana:latest
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    networks:
      - backend

  jaeger:
    image: jaegertracing/all-in-one:1.48
    container_name: jaeger
    ports:
      - "16686:16686"
      - "14250:14250"
    networks:
      - backend

  market-data-collector:
    build:
      context: ../
      dockerfile: services/market-data-collector/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8086:8086"
    env_file:
      - ../services/market-data-collector/.env
    restart: always
    networks:
      - backend

  preprocessor:
    build:
      context: ../
      dockerfile: services/preprocessor/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8081:8081"
    env_file:
      - ../services/preprocessor/.env
    restart: always
    networks:
      - backend

  analytics-api:
    build:
      context: ../
      dockerfile: services/analytics-api/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
    ports:
      - "8082:8082"
      - "8083:8083"
    env_file:
      - ../services/analytics-api/.env
    restart: always
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8082/readyz"]
      interval: 5s
      timeout: 3s
      retries: 10

  auth:
    build:
      context: ../
      dockerfile: services/auth/Dockerfile
    depends_on:
      timescaledb:
        condition: service_healthy
    ports:
      - "8084:8084"
      - "8085:8085"
    env_file:
      - ../services/auth/.env
    restart: always
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8084/readyz"]
      interval: 5s
      timeout: 3s
      retries: 10

  api-gateway:
    build:
      context: ../
      dockerfile: services/api-gateway/Dockerfile
    depends_on:
      auth:
        condition: service_healthy
      analytics-api:
        condition: service_healthy
    ports:
      - "8080:8080"
    env_file:
      - ../services/api-gateway/.env
    restart: always
    networks:
      - backend

  query-service:
    build:
      context: ../
      dockerfile: services/query-service/Dockerfile
    depends_on:
      timescaledb:
        condition: service_healthy
    ports:
      - "8087:8087"
      - "8088:8088"
    env_file:
      - ../services/query-service/.env
    restart: always
    networks:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8087/readyz"]
      interval: 5s
      timeout: 3s
      retries: 10
