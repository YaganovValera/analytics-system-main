// proto/v1/analytics/analytics.go
syntax = "proto3";

package market.analytics.v1;
option go_package = "github.com/YaganovValera/analytics-system/proto/gen/go/v1/analytics;analyticspb";

import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";
import "v1/common/common.proto";

// OHLCV candle data point.
message Candle {
  google.protobuf.Timestamp open_time = 1; // Start of interval
  google.protobuf.Timestamp close_time = 2; // End of interval
  string symbol = 3;                        // Trading symbol (e.g. BTCUSDT, upper-case ASCII)
  double open = 4;
  double high = 5;
  double low = 6;
  double close = 7;
  double volume = 8;
}

// Request to retrieve historical candle data.
message QueryCandlesRequest {
  string symbol = 1;                                // Symbol to query (e.g. BTCUSDT)
  google.protobuf.Timestamp start = 2;              // Inclusive start time
  google.protobuf.Timestamp end = 3;                // Exclusive end time
  market.common.v1.AggregationInterval interval = 4; // REQUIRED: must not be UNSPECIFIED
  market.common.v1.Pagination pagination = 5;
  market.common.v1.RequestMetadata metadata = 6;
}

// Request to subscribe to real-time candle stream.
message StreamCandlesRequest {
  string symbol = 1;                                // Symbol to stream
  market.common.v1.AggregationInterval interval = 2; // REQUIRED: must not be UNSPECIFIED
  market.common.v1.RequestMetadata metadata = 3;
}

// Response with paginated candle data.
message GetCandlesResponse {
  repeated Candle candles = 1;
  string next_page_token = 2;
}

// Streaming response with candles and errors.
message CandleEvent {
  oneof payload {
    Candle candle = 1;
    google.rpc.Status error = 2;
  }
}

// Optional acknowledgment from client in bidirectional stream
message Ack {
  string candle_id = 1; // Optional ID of processed candle (could be symbol+ts)
}

// Optional flow control or hints from server to client
message FlowControl {
  string message = 1; // e.g. "throttling", "resync required"
}

// Bi-directional stream request from client
message CandleStreamRequest {
  oneof payload {
    StreamCandlesRequest subscribe = 1;
    Ack ack = 2;
  }
}

// Bi-directional stream response from server
message CandleStreamResponse {
  oneof payload {
    CandleEvent event = 1;
    FlowControl control = 2;
  }
}

// Analytics API â€” historical and real-time OHLCV access.
service AnalyticsService {
  rpc GetCandles(QueryCandlesRequest) returns (GetCandlesResponse);

  rpc StreamCandles(StreamCandlesRequest) returns (stream CandleEvent);
  // Future-proof bi-directional stream with optional ACK and control
  rpc SubscribeCandles(stream CandleStreamRequest) returns (stream CandleStreamResponse);
}
