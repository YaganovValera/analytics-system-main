// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: v1/marketdata/marketdata.proto

package marketdatapb

import (
	common "github.com/YaganovValera/analytics-system/proto/gen/go/v1/common"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Market trade data point.
type MarketData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Price         float64                `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	BidPrice      float64                `protobuf:"fixed64,4,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`
	AskPrice      float64                `protobuf:"fixed64,5,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`
	Volume        float64                `protobuf:"fixed64,6,opt,name=volume,proto3" json:"volume,omitempty"`
	TradeId       string                 `protobuf:"bytes,7,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketData) Reset() {
	*x = MarketData{}
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketData) ProtoMessage() {}

func (x *MarketData) ProtoReflect() protoreflect.Message {
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketData.ProtoReflect.Descriptor instead.
func (*MarketData) Descriptor() ([]byte, []int) {
	return file_v1_marketdata_marketdata_proto_rawDescGZIP(), []int{0}
}

func (x *MarketData) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *MarketData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketData) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketData) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *MarketData) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *MarketData) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MarketData) GetTradeId() string {
	if x != nil {
		return x.TradeId
	}
	return ""
}

// Price level within an order book.
type OrderBookLevel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Price         float64                `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	Quantity      float64                `protobuf:"fixed64,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBookLevel) Reset() {
	*x = OrderBookLevel{}
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBookLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookLevel) ProtoMessage() {}

func (x *OrderBookLevel) ProtoReflect() protoreflect.Message {
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookLevel.ProtoReflect.Descriptor instead.
func (*OrderBookLevel) Descriptor() ([]byte, []int) {
	return file_v1_marketdata_marketdata_proto_rawDescGZIP(), []int{1}
}

func (x *OrderBookLevel) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderBookLevel) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

// Snapshot of the order book at a specific point in time.
type OrderBookSnapshot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Symbol        string                 `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Bids          []*OrderBookLevel      `protobuf:"bytes,3,rep,name=bids,proto3" json:"bids,omitempty"`
	Asks          []*OrderBookLevel      `protobuf:"bytes,4,rep,name=asks,proto3" json:"asks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBookSnapshot) Reset() {
	*x = OrderBookSnapshot{}
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBookSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookSnapshot) ProtoMessage() {}

func (x *OrderBookSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookSnapshot.ProtoReflect.Descriptor instead.
func (*OrderBookSnapshot) Descriptor() ([]byte, []int) {
	return file_v1_marketdata_marketdata_proto_rawDescGZIP(), []int{2}
}

func (x *OrderBookSnapshot) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *OrderBookSnapshot) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *OrderBookSnapshot) GetBids() []*OrderBookLevel {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *OrderBookSnapshot) GetAsks() []*OrderBookLevel {
	if x != nil {
		return x.Asks
	}
	return nil
}

// Filter to subscribe or query market data for a specific symbol.
type MarketDataFilter struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Symbol        string                  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Metadata      *common.RequestMetadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketDataFilter) Reset() {
	*x = MarketDataFilter{}
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketDataFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataFilter) ProtoMessage() {}

func (x *MarketDataFilter) ProtoReflect() protoreflect.Message {
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataFilter.ProtoReflect.Descriptor instead.
func (*MarketDataFilter) Descriptor() ([]byte, []int) {
	return file_v1_marketdata_marketdata_proto_rawDescGZIP(), []int{3}
}

func (x *MarketDataFilter) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketDataFilter) GetMetadata() *common.RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Streamed response for trade data.
type MarketDataEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*MarketDataEvent_Data
	//	*MarketDataEvent_Error
	Payload       isMarketDataEvent_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MarketDataEvent) Reset() {
	*x = MarketDataEvent{}
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MarketDataEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketDataEvent) ProtoMessage() {}

func (x *MarketDataEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketDataEvent.ProtoReflect.Descriptor instead.
func (*MarketDataEvent) Descriptor() ([]byte, []int) {
	return file_v1_marketdata_marketdata_proto_rawDescGZIP(), []int{4}
}

func (x *MarketDataEvent) GetPayload() isMarketDataEvent_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *MarketDataEvent) GetData() *MarketData {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataEvent_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *MarketDataEvent) GetError() *status.Status {
	if x != nil {
		if x, ok := x.Payload.(*MarketDataEvent_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isMarketDataEvent_Payload interface {
	isMarketDataEvent_Payload()
}

type MarketDataEvent_Data struct {
	Data *MarketData `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type MarketDataEvent_Error struct {
	Error *status.Status `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*MarketDataEvent_Data) isMarketDataEvent_Payload() {}

func (*MarketDataEvent_Error) isMarketDataEvent_Payload() {}

// Streamed response for order book updates.
type OrderBookEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*OrderBookEvent_Data
	//	*OrderBookEvent_Error
	Payload       isOrderBookEvent_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderBookEvent) Reset() {
	*x = OrderBookEvent{}
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBookEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookEvent) ProtoMessage() {}

func (x *OrderBookEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookEvent.ProtoReflect.Descriptor instead.
func (*OrderBookEvent) Descriptor() ([]byte, []int) {
	return file_v1_marketdata_marketdata_proto_rawDescGZIP(), []int{5}
}

func (x *OrderBookEvent) GetPayload() isOrderBookEvent_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *OrderBookEvent) GetData() *OrderBookSnapshot {
	if x != nil {
		if x, ok := x.Payload.(*OrderBookEvent_Data); ok {
			return x.Data
		}
	}
	return nil
}

func (x *OrderBookEvent) GetError() *status.Status {
	if x != nil {
		if x, ok := x.Payload.(*OrderBookEvent_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isOrderBookEvent_Payload interface {
	isOrderBookEvent_Payload()
}

type OrderBookEvent_Data struct {
	Data *OrderBookSnapshot `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type OrderBookEvent_Error struct {
	Error *status.Status `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*OrderBookEvent_Data) isOrderBookEvent_Payload() {}

func (*OrderBookEvent_Error) isOrderBookEvent_Payload() {}

// Request to retrieve historical market trade data.
type GetMarketDataRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Symbol        string                  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Start         *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End           *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	Pagination    *common.Pagination      `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Metadata      *common.RequestMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMarketDataRequest) Reset() {
	*x = GetMarketDataRequest{}
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMarketDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketDataRequest) ProtoMessage() {}

func (x *GetMarketDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketDataRequest.ProtoReflect.Descriptor instead.
func (*GetMarketDataRequest) Descriptor() ([]byte, []int) {
	return file_v1_marketdata_marketdata_proto_rawDescGZIP(), []int{6}
}

func (x *GetMarketDataRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetMarketDataRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *GetMarketDataRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *GetMarketDataRequest) GetPagination() *common.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetMarketDataRequest) GetMetadata() *common.RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Response with paginated historical trade data.
type GetMarketDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []*MarketData          `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMarketDataResponse) Reset() {
	*x = GetMarketDataResponse{}
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMarketDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarketDataResponse) ProtoMessage() {}

func (x *GetMarketDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarketDataResponse.ProtoReflect.Descriptor instead.
func (*GetMarketDataResponse) Descriptor() ([]byte, []int) {
	return file_v1_marketdata_marketdata_proto_rawDescGZIP(), []int{7}
}

func (x *GetMarketDataResponse) GetData() []*MarketData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetMarketDataResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Request to retrieve historical order book snapshots.
type GetOrderBookRequest struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Symbol        string                  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Start         *timestamppb.Timestamp  `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	End           *timestamppb.Timestamp  `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	Pagination    *common.Pagination      `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Metadata      *common.RequestMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrderBookRequest) Reset() {
	*x = GetOrderBookRequest{}
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderBookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderBookRequest) ProtoMessage() {}

func (x *GetOrderBookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderBookRequest.ProtoReflect.Descriptor instead.
func (*GetOrderBookRequest) Descriptor() ([]byte, []int) {
	return file_v1_marketdata_marketdata_proto_rawDescGZIP(), []int{8}
}

func (x *GetOrderBookRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *GetOrderBookRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *GetOrderBookRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *GetOrderBookRequest) GetPagination() *common.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetOrderBookRequest) GetMetadata() *common.RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Response with paginated order book snapshots.
type GetOrderBookResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Snapshots     []*OrderBookSnapshot   `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	Analysis      *OrderBookAnalysis     `protobuf:"bytes,3,opt,name=analysis,proto3" json:"analysis,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetOrderBookResponse) Reset() {
	*x = GetOrderBookResponse{}
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOrderBookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderBookResponse) ProtoMessage() {}

func (x *GetOrderBookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderBookResponse.ProtoReflect.Descriptor instead.
func (*GetOrderBookResponse) Descriptor() ([]byte, []int) {
	return file_v1_marketdata_marketdata_proto_rawDescGZIP(), []int{9}
}

func (x *GetOrderBookResponse) GetSnapshots() []*OrderBookSnapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

func (x *GetOrderBookResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

func (x *GetOrderBookResponse) GetAnalysis() *OrderBookAnalysis {
	if x != nil {
		return x.Analysis
	}
	return nil
}

type OrderBookAnalysis struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AvgSpreadPercent  float64                `protobuf:"fixed64,1,opt,name=avg_spread_percent,json=avgSpreadPercent,proto3" json:"avg_spread_percent,omitempty"`
	AvgBidVolumeTop10 float64                `protobuf:"fixed64,2,opt,name=avg_bid_volume_top10,json=avgBidVolumeTop10,proto3" json:"avg_bid_volume_top10,omitempty"`
	AvgAskVolumeTop10 float64                `protobuf:"fixed64,3,opt,name=avg_ask_volume_top10,json=avgAskVolumeTop10,proto3" json:"avg_ask_volume_top10,omitempty"`
	ImbalanceStart    float64                `protobuf:"fixed64,4,opt,name=imbalance_start,json=imbalanceStart,proto3" json:"imbalance_start,omitempty"`
	ImbalanceEnd      float64                `protobuf:"fixed64,5,opt,name=imbalance_end,json=imbalanceEnd,proto3" json:"imbalance_end,omitempty"`
	BidSlope          float64                `protobuf:"fixed64,6,opt,name=bid_slope,json=bidSlope,proto3" json:"bid_slope,omitempty"`
	AskSlope          float64                `protobuf:"fixed64,7,opt,name=ask_slope,json=askSlope,proto3" json:"ask_slope,omitempty"`
	MaxBidWallPrice   float64                `protobuf:"fixed64,8,opt,name=max_bid_wall_price,json=maxBidWallPrice,proto3" json:"max_bid_wall_price,omitempty"`
	MaxBidWallVolume  float64                `protobuf:"fixed64,9,opt,name=max_bid_wall_volume,json=maxBidWallVolume,proto3" json:"max_bid_wall_volume,omitempty"`
	MaxAskWallPrice   float64                `protobuf:"fixed64,10,opt,name=max_ask_wall_price,json=maxAskWallPrice,proto3" json:"max_ask_wall_price,omitempty"`
	MaxAskWallVolume  float64                `protobuf:"fixed64,11,opt,name=max_ask_wall_volume,json=maxAskWallVolume,proto3" json:"max_ask_wall_volume,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *OrderBookAnalysis) Reset() {
	*x = OrderBookAnalysis{}
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderBookAnalysis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookAnalysis) ProtoMessage() {}

func (x *OrderBookAnalysis) ProtoReflect() protoreflect.Message {
	mi := &file_v1_marketdata_marketdata_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookAnalysis.ProtoReflect.Descriptor instead.
func (*OrderBookAnalysis) Descriptor() ([]byte, []int) {
	return file_v1_marketdata_marketdata_proto_rawDescGZIP(), []int{10}
}

func (x *OrderBookAnalysis) GetAvgSpreadPercent() float64 {
	if x != nil {
		return x.AvgSpreadPercent
	}
	return 0
}

func (x *OrderBookAnalysis) GetAvgBidVolumeTop10() float64 {
	if x != nil {
		return x.AvgBidVolumeTop10
	}
	return 0
}

func (x *OrderBookAnalysis) GetAvgAskVolumeTop10() float64 {
	if x != nil {
		return x.AvgAskVolumeTop10
	}
	return 0
}

func (x *OrderBookAnalysis) GetImbalanceStart() float64 {
	if x != nil {
		return x.ImbalanceStart
	}
	return 0
}

func (x *OrderBookAnalysis) GetImbalanceEnd() float64 {
	if x != nil {
		return x.ImbalanceEnd
	}
	return 0
}

func (x *OrderBookAnalysis) GetBidSlope() float64 {
	if x != nil {
		return x.BidSlope
	}
	return 0
}

func (x *OrderBookAnalysis) GetAskSlope() float64 {
	if x != nil {
		return x.AskSlope
	}
	return 0
}

func (x *OrderBookAnalysis) GetMaxBidWallPrice() float64 {
	if x != nil {
		return x.MaxBidWallPrice
	}
	return 0
}

func (x *OrderBookAnalysis) GetMaxBidWallVolume() float64 {
	if x != nil {
		return x.MaxBidWallVolume
	}
	return 0
}

func (x *OrderBookAnalysis) GetMaxAskWallPrice() float64 {
	if x != nil {
		return x.MaxAskWallPrice
	}
	return 0
}

func (x *OrderBookAnalysis) GetMaxAskWallVolume() float64 {
	if x != nil {
		return x.MaxAskWallVolume
	}
	return 0
}

var File_v1_marketdata_marketdata_proto protoreflect.FileDescriptor

var file_v1_marketdata_marketdata_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2f,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x01, 0x0a, 0x0a, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x0e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x22, 0xd9, 0x01, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x38, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x62, 0x69,
	0x64, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f,
	0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x69, 0x0a, 0x10,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x80, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48,
	0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x75, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8a, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0xca, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f,
	0x6f, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x43, 0x0a,
	0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x52, 0x08, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x69, 0x73, 0x22, 0xe3, 0x03, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x61, 0x76, 0x67, 0x5f,
	0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x61, 0x76, 0x67, 0x53, 0x70, 0x72, 0x65, 0x61, 0x64, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x76, 0x67, 0x5f, 0x62, 0x69,
	0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x31, 0x30, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x61, 0x76, 0x67, 0x42, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x54, 0x6f, 0x70, 0x31, 0x30, 0x12, 0x2f, 0x0a, 0x14, 0x61, 0x76, 0x67, 0x5f, 0x61,
	0x73, 0x6b, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x70, 0x31, 0x30, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x61, 0x76, 0x67, 0x41, 0x73, 0x6b, 0x56, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x54, 0x6f, 0x70, 0x31, 0x30, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x6d, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x65,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x6d, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x73, 0x6c,
	0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x69, 0x64, 0x53, 0x6c,
	0x6f, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x6c, 0x6f, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x53, 0x6c, 0x6f, 0x70, 0x65,
	0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x61,
	0x78, 0x42, 0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a,
	0x13, 0x6d, 0x61, 0x78, 0x5f, 0x62, 0x69, 0x64, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x42,
	0x69, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x12,
	0x6d, 0x61, 0x78, 0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x41, 0x73, 0x6b,
	0x57, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78,
	0x5f, 0x61, 0x73, 0x6b, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x41, 0x73, 0x6b, 0x57, 0x61,
	0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x32, 0xac, 0x03, 0x0a, 0x11, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x63,
	0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x26, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x25, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x30, 0x01, 0x12, 0x61, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x26, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x24,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x30, 0x01, 0x12, 0x68, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x65, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b,
	0x12, 0x29, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x53, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x59, 0x61, 0x67, 0x61, 0x6e, 0x6f, 0x76, 0x56, 0x61, 0x6c,
	0x65, 0x72, 0x61, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67,
	0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x3b,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_v1_marketdata_marketdata_proto_rawDescOnce sync.Once
	file_v1_marketdata_marketdata_proto_rawDescData []byte
)

func file_v1_marketdata_marketdata_proto_rawDescGZIP() []byte {
	file_v1_marketdata_marketdata_proto_rawDescOnce.Do(func() {
		file_v1_marketdata_marketdata_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_marketdata_marketdata_proto_rawDesc), len(file_v1_marketdata_marketdata_proto_rawDesc)))
	})
	return file_v1_marketdata_marketdata_proto_rawDescData
}

var file_v1_marketdata_marketdata_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_v1_marketdata_marketdata_proto_goTypes = []any{
	(*MarketData)(nil),             // 0: market.marketdata.v1.MarketData
	(*OrderBookLevel)(nil),         // 1: market.marketdata.v1.OrderBookLevel
	(*OrderBookSnapshot)(nil),      // 2: market.marketdata.v1.OrderBookSnapshot
	(*MarketDataFilter)(nil),       // 3: market.marketdata.v1.MarketDataFilter
	(*MarketDataEvent)(nil),        // 4: market.marketdata.v1.MarketDataEvent
	(*OrderBookEvent)(nil),         // 5: market.marketdata.v1.OrderBookEvent
	(*GetMarketDataRequest)(nil),   // 6: market.marketdata.v1.GetMarketDataRequest
	(*GetMarketDataResponse)(nil),  // 7: market.marketdata.v1.GetMarketDataResponse
	(*GetOrderBookRequest)(nil),    // 8: market.marketdata.v1.GetOrderBookRequest
	(*GetOrderBookResponse)(nil),   // 9: market.marketdata.v1.GetOrderBookResponse
	(*OrderBookAnalysis)(nil),      // 10: market.marketdata.v1.OrderBookAnalysis
	(*timestamppb.Timestamp)(nil),  // 11: google.protobuf.Timestamp
	(*common.RequestMetadata)(nil), // 12: market.common.v1.RequestMetadata
	(*status.Status)(nil),          // 13: google.rpc.Status
	(*common.Pagination)(nil),      // 14: market.common.v1.Pagination
}
var file_v1_marketdata_marketdata_proto_depIdxs = []int32{
	11, // 0: market.marketdata.v1.MarketData.timestamp:type_name -> google.protobuf.Timestamp
	11, // 1: market.marketdata.v1.OrderBookSnapshot.timestamp:type_name -> google.protobuf.Timestamp
	1,  // 2: market.marketdata.v1.OrderBookSnapshot.bids:type_name -> market.marketdata.v1.OrderBookLevel
	1,  // 3: market.marketdata.v1.OrderBookSnapshot.asks:type_name -> market.marketdata.v1.OrderBookLevel
	12, // 4: market.marketdata.v1.MarketDataFilter.metadata:type_name -> market.common.v1.RequestMetadata
	0,  // 5: market.marketdata.v1.MarketDataEvent.data:type_name -> market.marketdata.v1.MarketData
	13, // 6: market.marketdata.v1.MarketDataEvent.error:type_name -> google.rpc.Status
	2,  // 7: market.marketdata.v1.OrderBookEvent.data:type_name -> market.marketdata.v1.OrderBookSnapshot
	13, // 8: market.marketdata.v1.OrderBookEvent.error:type_name -> google.rpc.Status
	11, // 9: market.marketdata.v1.GetMarketDataRequest.start:type_name -> google.protobuf.Timestamp
	11, // 10: market.marketdata.v1.GetMarketDataRequest.end:type_name -> google.protobuf.Timestamp
	14, // 11: market.marketdata.v1.GetMarketDataRequest.pagination:type_name -> market.common.v1.Pagination
	12, // 12: market.marketdata.v1.GetMarketDataRequest.metadata:type_name -> market.common.v1.RequestMetadata
	0,  // 13: market.marketdata.v1.GetMarketDataResponse.data:type_name -> market.marketdata.v1.MarketData
	11, // 14: market.marketdata.v1.GetOrderBookRequest.start:type_name -> google.protobuf.Timestamp
	11, // 15: market.marketdata.v1.GetOrderBookRequest.end:type_name -> google.protobuf.Timestamp
	14, // 16: market.marketdata.v1.GetOrderBookRequest.pagination:type_name -> market.common.v1.Pagination
	12, // 17: market.marketdata.v1.GetOrderBookRequest.metadata:type_name -> market.common.v1.RequestMetadata
	2,  // 18: market.marketdata.v1.GetOrderBookResponse.snapshots:type_name -> market.marketdata.v1.OrderBookSnapshot
	10, // 19: market.marketdata.v1.GetOrderBookResponse.analysis:type_name -> market.marketdata.v1.OrderBookAnalysis
	3,  // 20: market.marketdata.v1.MarketDataService.StreamMarketData:input_type -> market.marketdata.v1.MarketDataFilter
	3,  // 21: market.marketdata.v1.MarketDataService.StreamOrderBook:input_type -> market.marketdata.v1.MarketDataFilter
	6,  // 22: market.marketdata.v1.MarketDataService.GetMarketData:input_type -> market.marketdata.v1.GetMarketDataRequest
	8,  // 23: market.marketdata.v1.MarketDataService.GetOrderBook:input_type -> market.marketdata.v1.GetOrderBookRequest
	4,  // 24: market.marketdata.v1.MarketDataService.StreamMarketData:output_type -> market.marketdata.v1.MarketDataEvent
	5,  // 25: market.marketdata.v1.MarketDataService.StreamOrderBook:output_type -> market.marketdata.v1.OrderBookEvent
	7,  // 26: market.marketdata.v1.MarketDataService.GetMarketData:output_type -> market.marketdata.v1.GetMarketDataResponse
	9,  // 27: market.marketdata.v1.MarketDataService.GetOrderBook:output_type -> market.marketdata.v1.GetOrderBookResponse
	24, // [24:28] is the sub-list for method output_type
	20, // [20:24] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_v1_marketdata_marketdata_proto_init() }
func file_v1_marketdata_marketdata_proto_init() {
	if File_v1_marketdata_marketdata_proto != nil {
		return
	}
	file_v1_marketdata_marketdata_proto_msgTypes[4].OneofWrappers = []any{
		(*MarketDataEvent_Data)(nil),
		(*MarketDataEvent_Error)(nil),
	}
	file_v1_marketdata_marketdata_proto_msgTypes[5].OneofWrappers = []any{
		(*OrderBookEvent_Data)(nil),
		(*OrderBookEvent_Error)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_marketdata_marketdata_proto_rawDesc), len(file_v1_marketdata_marketdata_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_marketdata_marketdata_proto_goTypes,
		DependencyIndexes: file_v1_marketdata_marketdata_proto_depIdxs,
		MessageInfos:      file_v1_marketdata_marketdata_proto_msgTypes,
	}.Build()
	File_v1_marketdata_marketdata_proto = out.File
	file_v1_marketdata_marketdata_proto_goTypes = nil
	file_v1_marketdata_marketdata_proto_depIdxs = nil
}
