// proto/v1/analytics/analytics.go

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: v1/analytics/analytics.proto

package analyticspb

import (
	common "github.com/YaganovValera/analytics-system/proto/gen/go/v1/common"
	status "google.golang.org/genproto/googleapis/rpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OHLCV candle data point.
type Candle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OpenTime      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`    // Start of interval
	CloseTime     *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"` // End of interval
	Symbol        string                 `protobuf:"bytes,3,opt,name=symbol,proto3" json:"symbol,omitempty"`                        // Trading symbol (e.g. BTCUSDT, upper-case ASCII)
	Open          float64                `protobuf:"fixed64,4,opt,name=open,proto3" json:"open,omitempty"`
	High          float64                `protobuf:"fixed64,5,opt,name=high,proto3" json:"high,omitempty"`
	Low           float64                `protobuf:"fixed64,6,opt,name=low,proto3" json:"low,omitempty"`
	Close         float64                `protobuf:"fixed64,7,opt,name=close,proto3" json:"close,omitempty"`
	Volume        float64                `protobuf:"fixed64,8,opt,name=volume,proto3" json:"volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Candle) Reset() {
	*x = Candle{}
	mi := &file_v1_analytics_analytics_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Candle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Candle) ProtoMessage() {}

func (x *Candle) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analytics_analytics_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Candle.ProtoReflect.Descriptor instead.
func (*Candle) Descriptor() ([]byte, []int) {
	return file_v1_analytics_analytics_proto_rawDescGZIP(), []int{0}
}

func (x *Candle) GetOpenTime() *timestamppb.Timestamp {
	if x != nil {
		return x.OpenTime
	}
	return nil
}

func (x *Candle) GetCloseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CloseTime
	}
	return nil
}

func (x *Candle) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Candle) GetOpen() float64 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Candle) GetHigh() float64 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Candle) GetLow() float64 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Candle) GetClose() float64 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Candle) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

// Request to retrieve historical candle data.
type QueryCandlesRequest struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Symbol        string                     `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                // Symbol to query (e.g. BTCUSDT)
	Start         *timestamppb.Timestamp     `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`                                                  // Inclusive start time
	End           *timestamppb.Timestamp     `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`                                                      // Exclusive end time
	Interval      common.AggregationInterval `protobuf:"varint,4,opt,name=interval,proto3,enum=market.common.v1.AggregationInterval" json:"interval,omitempty"` // REQUIRED: must not be UNSPECIFIED
	Pagination    *common.Pagination         `protobuf:"bytes,5,opt,name=pagination,proto3" json:"pagination,omitempty"`
	Metadata      *common.RequestMetadata    `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryCandlesRequest) Reset() {
	*x = QueryCandlesRequest{}
	mi := &file_v1_analytics_analytics_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryCandlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCandlesRequest) ProtoMessage() {}

func (x *QueryCandlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analytics_analytics_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCandlesRequest.ProtoReflect.Descriptor instead.
func (*QueryCandlesRequest) Descriptor() ([]byte, []int) {
	return file_v1_analytics_analytics_proto_rawDescGZIP(), []int{1}
}

func (x *QueryCandlesRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *QueryCandlesRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *QueryCandlesRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *QueryCandlesRequest) GetInterval() common.AggregationInterval {
	if x != nil {
		return x.Interval
	}
	return common.AggregationInterval(0)
}

func (x *QueryCandlesRequest) GetPagination() *common.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *QueryCandlesRequest) GetMetadata() *common.RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Request to subscribe to real-time candle stream.
type StreamCandlesRequest struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Symbol        string                     `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`                                                // Symbol to stream
	Interval      common.AggregationInterval `protobuf:"varint,2,opt,name=interval,proto3,enum=market.common.v1.AggregationInterval" json:"interval,omitempty"` // REQUIRED: must not be UNSPECIFIED
	Metadata      *common.RequestMetadata    `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamCandlesRequest) Reset() {
	*x = StreamCandlesRequest{}
	mi := &file_v1_analytics_analytics_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCandlesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCandlesRequest) ProtoMessage() {}

func (x *StreamCandlesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analytics_analytics_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCandlesRequest.ProtoReflect.Descriptor instead.
func (*StreamCandlesRequest) Descriptor() ([]byte, []int) {
	return file_v1_analytics_analytics_proto_rawDescGZIP(), []int{2}
}

func (x *StreamCandlesRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StreamCandlesRequest) GetInterval() common.AggregationInterval {
	if x != nil {
		return x.Interval
	}
	return common.AggregationInterval(0)
}

func (x *StreamCandlesRequest) GetMetadata() *common.RequestMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Response with paginated candle data.
type GetCandlesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Candles       []*Candle              `protobuf:"bytes,1,rep,name=candles,proto3" json:"candles,omitempty"`
	NextPageToken string                 `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCandlesResponse) Reset() {
	*x = GetCandlesResponse{}
	mi := &file_v1_analytics_analytics_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCandlesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCandlesResponse) ProtoMessage() {}

func (x *GetCandlesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analytics_analytics_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCandlesResponse.ProtoReflect.Descriptor instead.
func (*GetCandlesResponse) Descriptor() ([]byte, []int) {
	return file_v1_analytics_analytics_proto_rawDescGZIP(), []int{3}
}

func (x *GetCandlesResponse) GetCandles() []*Candle {
	if x != nil {
		return x.Candles
	}
	return nil
}

func (x *GetCandlesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// Streaming response with candles and errors.
type CandleEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*CandleEvent_Candle
	//	*CandleEvent_Error
	Payload       isCandleEvent_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CandleEvent) Reset() {
	*x = CandleEvent{}
	mi := &file_v1_analytics_analytics_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CandleEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandleEvent) ProtoMessage() {}

func (x *CandleEvent) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analytics_analytics_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandleEvent.ProtoReflect.Descriptor instead.
func (*CandleEvent) Descriptor() ([]byte, []int) {
	return file_v1_analytics_analytics_proto_rawDescGZIP(), []int{4}
}

func (x *CandleEvent) GetPayload() isCandleEvent_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CandleEvent) GetCandle() *Candle {
	if x != nil {
		if x, ok := x.Payload.(*CandleEvent_Candle); ok {
			return x.Candle
		}
	}
	return nil
}

func (x *CandleEvent) GetError() *status.Status {
	if x != nil {
		if x, ok := x.Payload.(*CandleEvent_Error); ok {
			return x.Error
		}
	}
	return nil
}

type isCandleEvent_Payload interface {
	isCandleEvent_Payload()
}

type CandleEvent_Candle struct {
	Candle *Candle `protobuf:"bytes,1,opt,name=candle,proto3,oneof"`
}

type CandleEvent_Error struct {
	Error *status.Status `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

func (*CandleEvent_Candle) isCandleEvent_Payload() {}

func (*CandleEvent_Error) isCandleEvent_Payload() {}

// Optional acknowledgment from client in bidirectional stream
type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CandleId      string                 `protobuf:"bytes,1,opt,name=candle_id,json=candleId,proto3" json:"candle_id,omitempty"` // Optional ID of processed candle (could be symbol+ts)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_v1_analytics_analytics_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analytics_analytics_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_v1_analytics_analytics_proto_rawDescGZIP(), []int{5}
}

func (x *Ack) GetCandleId() string {
	if x != nil {
		return x.CandleId
	}
	return ""
}

// Optional flow control or hints from server to client
type FlowControl struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"` // e.g. "throttling", "resync required"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlowControl) Reset() {
	*x = FlowControl{}
	mi := &file_v1_analytics_analytics_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlowControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlowControl) ProtoMessage() {}

func (x *FlowControl) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analytics_analytics_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlowControl.ProtoReflect.Descriptor instead.
func (*FlowControl) Descriptor() ([]byte, []int) {
	return file_v1_analytics_analytics_proto_rawDescGZIP(), []int{6}
}

func (x *FlowControl) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Bi-directional stream request from client
type CandleStreamRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*CandleStreamRequest_Subscribe
	//	*CandleStreamRequest_Ack
	Payload       isCandleStreamRequest_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CandleStreamRequest) Reset() {
	*x = CandleStreamRequest{}
	mi := &file_v1_analytics_analytics_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CandleStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandleStreamRequest) ProtoMessage() {}

func (x *CandleStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analytics_analytics_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandleStreamRequest.ProtoReflect.Descriptor instead.
func (*CandleStreamRequest) Descriptor() ([]byte, []int) {
	return file_v1_analytics_analytics_proto_rawDescGZIP(), []int{7}
}

func (x *CandleStreamRequest) GetPayload() isCandleStreamRequest_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CandleStreamRequest) GetSubscribe() *StreamCandlesRequest {
	if x != nil {
		if x, ok := x.Payload.(*CandleStreamRequest_Subscribe); ok {
			return x.Subscribe
		}
	}
	return nil
}

func (x *CandleStreamRequest) GetAck() *Ack {
	if x != nil {
		if x, ok := x.Payload.(*CandleStreamRequest_Ack); ok {
			return x.Ack
		}
	}
	return nil
}

type isCandleStreamRequest_Payload interface {
	isCandleStreamRequest_Payload()
}

type CandleStreamRequest_Subscribe struct {
	Subscribe *StreamCandlesRequest `protobuf:"bytes,1,opt,name=subscribe,proto3,oneof"`
}

type CandleStreamRequest_Ack struct {
	Ack *Ack `protobuf:"bytes,2,opt,name=ack,proto3,oneof"`
}

func (*CandleStreamRequest_Subscribe) isCandleStreamRequest_Payload() {}

func (*CandleStreamRequest_Ack) isCandleStreamRequest_Payload() {}

// Bi-directional stream response from server
type CandleStreamResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Payload:
	//
	//	*CandleStreamResponse_Event
	//	*CandleStreamResponse_Control
	Payload       isCandleStreamResponse_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CandleStreamResponse) Reset() {
	*x = CandleStreamResponse{}
	mi := &file_v1_analytics_analytics_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CandleStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CandleStreamResponse) ProtoMessage() {}

func (x *CandleStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_analytics_analytics_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CandleStreamResponse.ProtoReflect.Descriptor instead.
func (*CandleStreamResponse) Descriptor() ([]byte, []int) {
	return file_v1_analytics_analytics_proto_rawDescGZIP(), []int{8}
}

func (x *CandleStreamResponse) GetPayload() isCandleStreamResponse_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *CandleStreamResponse) GetEvent() *CandleEvent {
	if x != nil {
		if x, ok := x.Payload.(*CandleStreamResponse_Event); ok {
			return x.Event
		}
	}
	return nil
}

func (x *CandleStreamResponse) GetControl() *FlowControl {
	if x != nil {
		if x, ok := x.Payload.(*CandleStreamResponse_Control); ok {
			return x.Control
		}
	}
	return nil
}

type isCandleStreamResponse_Payload interface {
	isCandleStreamResponse_Payload()
}

type CandleStreamResponse_Event struct {
	Event *CandleEvent `protobuf:"bytes,1,opt,name=event,proto3,oneof"`
}

type CandleStreamResponse_Control struct {
	Control *FlowControl `protobuf:"bytes,2,opt,name=control,proto3,oneof"`
}

func (*CandleStreamResponse_Event) isCandleStreamResponse_Payload() {}

func (*CandleStreamResponse_Control) isCandleStreamResponse_Payload() {}

var File_v1_analytics_analytics_proto protoreflect.FileDescriptor

var file_v1_analytics_analytics_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x76, 0x31, 0x2f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfc, 0x01, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x12, 0x37, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04,
	0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x22, 0xcd, 0x02, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3c, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x41, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x73, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x07, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x07, 0x63, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7b, 0x0a, 0x0b,
	0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x63,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x42, 0x09,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x22, 0x0a, 0x03, 0x41, 0x63, 0x6b,
	0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x27, 0x0a,
	0x0b, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49,
	0x0a, 0x09, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x61, 0x63, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x14, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x05,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x6f,
	0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x32, 0xc0,
	0x02, 0x0a, 0x10, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x73, 0x12, 0x28, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x30, 0x01, 0x12, 0x6b, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30,
	0x01, 0x42, 0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x59, 0x61, 0x67, 0x61, 0x6e, 0x6f, 0x76, 0x56, 0x61, 0x6c, 0x65, 0x72, 0x61, 0x2f, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x2d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x73, 0x3b, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x73, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_v1_analytics_analytics_proto_rawDescOnce sync.Once
	file_v1_analytics_analytics_proto_rawDescData []byte
)

func file_v1_analytics_analytics_proto_rawDescGZIP() []byte {
	file_v1_analytics_analytics_proto_rawDescOnce.Do(func() {
		file_v1_analytics_analytics_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_analytics_analytics_proto_rawDesc), len(file_v1_analytics_analytics_proto_rawDesc)))
	})
	return file_v1_analytics_analytics_proto_rawDescData
}

var file_v1_analytics_analytics_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_v1_analytics_analytics_proto_goTypes = []any{
	(*Candle)(nil),                  // 0: market.analytics.v1.Candle
	(*QueryCandlesRequest)(nil),     // 1: market.analytics.v1.QueryCandlesRequest
	(*StreamCandlesRequest)(nil),    // 2: market.analytics.v1.StreamCandlesRequest
	(*GetCandlesResponse)(nil),      // 3: market.analytics.v1.GetCandlesResponse
	(*CandleEvent)(nil),             // 4: market.analytics.v1.CandleEvent
	(*Ack)(nil),                     // 5: market.analytics.v1.Ack
	(*FlowControl)(nil),             // 6: market.analytics.v1.FlowControl
	(*CandleStreamRequest)(nil),     // 7: market.analytics.v1.CandleStreamRequest
	(*CandleStreamResponse)(nil),    // 8: market.analytics.v1.CandleStreamResponse
	(*timestamppb.Timestamp)(nil),   // 9: google.protobuf.Timestamp
	(common.AggregationInterval)(0), // 10: market.common.v1.AggregationInterval
	(*common.Pagination)(nil),       // 11: market.common.v1.Pagination
	(*common.RequestMetadata)(nil),  // 12: market.common.v1.RequestMetadata
	(*status.Status)(nil),           // 13: google.rpc.Status
}
var file_v1_analytics_analytics_proto_depIdxs = []int32{
	9,  // 0: market.analytics.v1.Candle.open_time:type_name -> google.protobuf.Timestamp
	9,  // 1: market.analytics.v1.Candle.close_time:type_name -> google.protobuf.Timestamp
	9,  // 2: market.analytics.v1.QueryCandlesRequest.start:type_name -> google.protobuf.Timestamp
	9,  // 3: market.analytics.v1.QueryCandlesRequest.end:type_name -> google.protobuf.Timestamp
	10, // 4: market.analytics.v1.QueryCandlesRequest.interval:type_name -> market.common.v1.AggregationInterval
	11, // 5: market.analytics.v1.QueryCandlesRequest.pagination:type_name -> market.common.v1.Pagination
	12, // 6: market.analytics.v1.QueryCandlesRequest.metadata:type_name -> market.common.v1.RequestMetadata
	10, // 7: market.analytics.v1.StreamCandlesRequest.interval:type_name -> market.common.v1.AggregationInterval
	12, // 8: market.analytics.v1.StreamCandlesRequest.metadata:type_name -> market.common.v1.RequestMetadata
	0,  // 9: market.analytics.v1.GetCandlesResponse.candles:type_name -> market.analytics.v1.Candle
	0,  // 10: market.analytics.v1.CandleEvent.candle:type_name -> market.analytics.v1.Candle
	13, // 11: market.analytics.v1.CandleEvent.error:type_name -> google.rpc.Status
	2,  // 12: market.analytics.v1.CandleStreamRequest.subscribe:type_name -> market.analytics.v1.StreamCandlesRequest
	5,  // 13: market.analytics.v1.CandleStreamRequest.ack:type_name -> market.analytics.v1.Ack
	4,  // 14: market.analytics.v1.CandleStreamResponse.event:type_name -> market.analytics.v1.CandleEvent
	6,  // 15: market.analytics.v1.CandleStreamResponse.control:type_name -> market.analytics.v1.FlowControl
	1,  // 16: market.analytics.v1.AnalyticsService.GetCandles:input_type -> market.analytics.v1.QueryCandlesRequest
	2,  // 17: market.analytics.v1.AnalyticsService.StreamCandles:input_type -> market.analytics.v1.StreamCandlesRequest
	7,  // 18: market.analytics.v1.AnalyticsService.SubscribeCandles:input_type -> market.analytics.v1.CandleStreamRequest
	3,  // 19: market.analytics.v1.AnalyticsService.GetCandles:output_type -> market.analytics.v1.GetCandlesResponse
	4,  // 20: market.analytics.v1.AnalyticsService.StreamCandles:output_type -> market.analytics.v1.CandleEvent
	8,  // 21: market.analytics.v1.AnalyticsService.SubscribeCandles:output_type -> market.analytics.v1.CandleStreamResponse
	19, // [19:22] is the sub-list for method output_type
	16, // [16:19] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_v1_analytics_analytics_proto_init() }
func file_v1_analytics_analytics_proto_init() {
	if File_v1_analytics_analytics_proto != nil {
		return
	}
	file_v1_analytics_analytics_proto_msgTypes[4].OneofWrappers = []any{
		(*CandleEvent_Candle)(nil),
		(*CandleEvent_Error)(nil),
	}
	file_v1_analytics_analytics_proto_msgTypes[7].OneofWrappers = []any{
		(*CandleStreamRequest_Subscribe)(nil),
		(*CandleStreamRequest_Ack)(nil),
	}
	file_v1_analytics_analytics_proto_msgTypes[8].OneofWrappers = []any{
		(*CandleStreamResponse_Event)(nil),
		(*CandleStreamResponse_Control)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_analytics_analytics_proto_rawDesc), len(file_v1_analytics_analytics_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_analytics_analytics_proto_goTypes,
		DependencyIndexes: file_v1_analytics_analytics_proto_depIdxs,
		MessageInfos:      file_v1_analytics_analytics_proto_msgTypes,
	}.Build()
	File_v1_analytics_analytics_proto = out.File
	file_v1_analytics_analytics_proto_goTypes = nil
	file_v1_analytics_analytics_proto_depIdxs = nil
}
